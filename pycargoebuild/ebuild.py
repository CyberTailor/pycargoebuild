import datetime
import tarfile
import typing

from pathlib import Path

import license_expression

from pycargoebuild import __version__
from pycargoebuild.cargo import PackageMetadata, get_package_metadata
from pycargoebuild.license import spdx_to_ebuild


EBUILD_TEMPLATE = """\
# Copyright {year} Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Autogenerated by pycargoebuild {prog_version}

EAPI=8

CRATES="
{crates}
"

inherit cargo

DESCRIPTION="{description}"
HOMEPAGE="{homepage}"
SRC_URI="
\t$(cargo_crate_uris)
"

LICENSE="{pkg_license}"
# Dependent crate licenses
LICENSE+=" {crate_licenses}"
SLOT="0"
KEYWORDS="~amd64"
"""


def get_ebuild(pkg_meta: PackageMetadata, crate_files: typing.Iterable[Path]
               ) -> str:
    """
    Get ebuild contents for passed contents of Cargo.toml and Cargo.lock.
    """

    # get package's license
    spdx = license_expression.get_spdx_licensing()
    parsed_pkg_license = spdx.parse(pkg_meta.license,
                                    validate=True,
                                    strict=True)

    # construct the CRATES var
    crate_var = "\n".join(f"\t{p.name}" for p in crate_files)

    # grab crate licenses
    crate_licenses = set()
    for path in crate_files:
        assert path.name.endswith(".crate")
        with tarfile.open(path, "r:gz") as crate:
            tarf = crate.extractfile(f"{path.name[:-6]}/Cargo.toml")
            assert tarf is not None
            with tarf:
                # tarfile.ExFileObject() is IO[bytes] while tomli/tomllib
                # expects BinaryIO -- but it actually is compatible
                # https://github.com/hukkin/tomli/issues/214
                crate_metadata = get_package_metadata(tarf)  # type: ignore
                crate_licenses.add(crate_metadata.license)

    # combine crate licenses and simplify the result
    crate_licenses.discard(pkg_meta.license)
    combined_license = " AND ".join(f"( {x} )" for x in crate_licenses)
    parsed_license = spdx.parse(combined_license, validate=True, strict=True)
    final_license = parsed_license.simplify()

    return EBUILD_TEMPLATE.format(crates=crate_var,
                                  crate_licenses=spdx_to_ebuild(final_license),
                                  description=pkg_meta.description or "",
                                  homepage=pkg_meta.homepage or "",
                                  pkg_license=spdx_to_ebuild(
                                      parsed_pkg_license),
                                  prog_version=__version__,
                                  year=datetime.date.today().year)
